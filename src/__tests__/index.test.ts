import parseLFSMessage from "../index";

const asciiStart = 32,
  asciiEnd = 126;
const asciiCharacters = Array(asciiEnd - asciiStart + 1)
  .fill(null)
  .map((_, index) => index + asciiStart);

describe("parseLFSMessage", () => {
  it("should convert Latin 1 (CP1252) as the default codepage", () => {
    expect(
      parseLFSMessage(
        Buffer.from([
          ...asciiCharacters,
          // 127 [DEL] not available in LFS
          128,
          // 129 unused
          // 130 [‚] not available in LFS
          // 131 [ƒ] not available in LFS
          // 132 [„] not available in LFS
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          // 141 unused
          142,
          // 143 unused
          // 144 unused
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          // 157 unused
          158,
          159,
          160,
          161,
          162,
          163,
          // 164 [¤] not available in LFS
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          // 188 [¼] not available in LFS
          // 189 [½] not available in LFS
          // 190 [¾] not available in LFS
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
        ])
      )
    ).toEqual(
      " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ ¡¢£¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    );
  });

  it("should convert Latin 1 (CP1252) using ^L control character", () => {
    expect(
      parseLFSMessage(
        Buffer.from([
          94, // ^
          76, // L
          ...asciiCharacters,
          // 127 [DEL] not available in LFS
          128,
          // 129 unused
          // 130 [‚] not available in LFS
          // 131 [ƒ] not available in LFS
          // 132 [„] not available in LFS
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          // 141 unused
          142,
          // 143 unused
          // 144 unused
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          // 157 unused
          158,
          159,
          160,
          161,
          162,
          163,
          // 164 [¤] not available in LFS
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          // 188 [¼] not available in LFS
          // 189 [½] not available in LFS
          // 190 [¾] not available in LFS
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
        ])
      )
    ).toEqual(
      " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ ¡¢£¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    );
  });

  it("should convert Central Europe (CP1250) using ^E control character", () => {
    expect(
      parseLFSMessage(
        Buffer.from([
          94, // ^
          69, // E
          ...asciiCharacters,
          // 127 [DEL] not available in LFS
          128,
          // 129 unused
          // 130 [‚] not available in LFS
          // 131 unused
          // 132 [„] not available in LFS
          133,
          134,
          135,
          // 136 unused
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          // 144 unused
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          // 152 unused
          153,
          154,
          155,
          156,
          157,
          158,
          159,
          160,
          161,
          162,
          163,
          // 164 [¤] not available in LFS
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          174,
          175,
          176,
          177,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          186,
          187,
          188,
          189,
          190,
          191,
          192,
          193,
          194,
          195,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
        ])
      )
    ).toEqual(
      " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€…†‡‰Š‹ŚŤŽŹ‘’“”•–—™š›śťžź ˇ˘ŁĄ¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    );
  });
});
