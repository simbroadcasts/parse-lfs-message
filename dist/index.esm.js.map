{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["const codepages: Record<string, string> = {\n  \"^L\": \"CP1252\",\n  \"^G\": \"CP1253\",\n  \"^C\": \"CP1251\",\n  \"^E\": \"CP1250\",\n  \"^T\": \"CP1254\",\n  \"^B\": \"CP1257\",\n  \"^J\": \"shift-jis\",\n  \"^H\": \"big5\",\n  \"^S\": \"gbk\",\n  \"^K\": \"euc-kr\",\n  \"^8\": \"CP1252\",\n};\n\nconst specials: Record<string, string> = {\n  \"^v\": \"|\",\n  \"^a\": \"*\",\n  \"^c\": \":\",\n  \"^d\": \"\\\\\",\n  \"^s\": \"/\",\n  \"^q\": \"?\",\n  \"^t\": '\"',\n  \"^l\": \"<\",\n  \"^r\": \">\",\n  \"^h\": \"#\",\n  \"^^\": \"^\",\n};\n\nconst isMultiByte = (cp: string, c: number): boolean => {\n  switch (cp) {\n    case \"^L\":\n    case \"^8\":\n    case \"^G\":\n    case \"^C\":\n    case \"^E\":\n    case \"^T\":\n    case \"^B\":\n      return false;\n    case \"^J\":\n      return (c > 0x80 && c < 0xa0) || (c >= 0xe0 && c < 0xfd);\n    case \"^H\":\n    case \"^S\":\n    case \"^K\":\n      return c > 0x80 && c < 0xff;\n    default:\n      throw new Error(`Unknown Codepage: ${c}`);\n  }\n};\n\nfunction parseLFSMessage(msg: Uint8Array | string): string {\n  let buffer: Uint8Array;\n\n  if (typeof msg === \"string\") {\n    buffer = new Uint8Array(msg.split(\"\").map((char) => char.charCodeAt(0)));\n  } else {\n    buffer = msg;\n  }\n\n  // Default codepage: Latin 1\n  let currentCodepage = \"^L\";\n  let resultString = \"\";\n  let blockStart = 0;\n  let blockEnd = 0;\n  let iconvCurrent = new TextDecoder(codepages[currentCodepage]);\n\n  for (let i = 0; i <= buffer.length; i++) {\n    if (i === buffer.length || buffer[i] === 0) {\n      // End of string\n      if (blockStart < blockEnd) {\n        // Convert current block if it has data\n        resultString += iconvCurrent.decode(buffer.slice(blockStart, blockEnd));\n      }\n      i = buffer.length; // Break out of loop\n    } else if (isMultiByte(currentCodepage, buffer[i])) {\n      // Skip multi-byte char\n      blockEnd += 2;\n      i++;\n    } else if (buffer[i] === 0x5e) {\n      // Found '^'\n      let cpCheck = `^${iconvCurrent.decode(buffer.slice(i + 1, i + 2))}`;\n      if (codepages.hasOwnProperty(cpCheck)) {\n        // Changing codepage\n        currentCodepage = cpCheck;\n        iconvCurrent = new TextDecoder(codepages[currentCodepage]);\n        if (blockStart < blockEnd) {\n          // Convert current block if it has data\n          resultString += iconvCurrent.decode(\n            buffer.slice(blockStart, blockEnd)\n          );\n        }\n        // Start a new block\n        if (buffer[i + 1] === 0x38) {\n          blockStart = i;\n        } else {\n          blockStart = i + 2;\n        }\n        blockEnd = i + 2;\n        i++;\n      } else {\n        // Skip escaped/colour change character\n        blockEnd += 2;\n        i++;\n      }\n    } else {\n      // single byte char\n      blockEnd++;\n    }\n  }\n\n  for (let i in specials) {\n    resultString = resultString.split(i).join(specials[i]);\n  }\n\n  return resultString;\n}\n\nexport default parseLFSMessage;\n"],"names":["codepages","specials","isMultiByte","cp","c","Error","msg","buffer","Uint8Array","split","map","char","charCodeAt","currentCodepage","resultString","blockStart","iconvCurrent","TextDecoder","i","length","blockEnd","decode","slice","cpCheck","hasOwnProperty","_i","join"],"mappings":"AAAA,IAAMA,EAAoC,CACxC,KAAM,SACN,KAAM,SACN,KAAM,SACN,KAAM,SACN,KAAM,SACN,KAAM,SACN,KAAM,YACN,KAAM,OACN,KAAM,MACN,KAAM,SACN,KAAM,UAGFC,EAAmC,CACvC,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,KACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,KAGFC,EAAc,SAACC,EAAYC,GAC/B,OAAQD,GACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,IAAK,KACH,OAAQC,EAAI,KAAQA,EAAI,KAAUA,GAAK,KAAQA,EAAI,IACrD,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAQA,EAAG,KAAQA,EAAI,IACzB,QACE,MAAUC,IAAAA,MAA2BD,qBAAAA,GAE3C,EAEA,WAAyBE,GACvB,IAAIC,EAGFA,EADiB,iBAARD,EACA,IAAIE,WAAWF,EAAIG,MAAM,IAAIC,IAAI,SAACC,GAASA,OAAAA,EAAKC,WAAW,EAAE,IAE7DN,EAUX,IANA,IAAIO,EAAkB,KACNC,EAAG,GACfC,EAAa,IACF,EACCC,EAAG,IAAIC,YAAYjB,EAAUa,IAEpCK,EAAI,EAAGA,GAAKX,EAAOY,OAAQD,IAClC,GAAIA,IAAMX,EAAOY,QAAwB,IAAdZ,EAAOW,GAE5BH,EAAaK,IAEfN,GAAgBE,EAAaK,OAAOd,EAAOe,MAAMP,EAAYK,KAE/DF,EAAIX,EAAOY,YACN,GAAIjB,EAAYW,EAAiBN,EAAOW,IAE7CE,GAAY,EACZF,SACK,GAAkB,KAAdX,EAAOW,GAAa,CAE7B,IAAIK,EAAcP,IAAAA,EAAaK,OAAOd,EAAOe,MAAMJ,EAAI,EAAGA,EAAI,IAC1DlB,EAAUwB,eAAeD,IAE3BV,EAAkBU,EAClBP,EAAe,IAAeC,YAACjB,EAAUa,IACrCE,EAAaK,IAEfN,GAAgBE,EAAaK,OAC3Bd,EAAOe,MAAMP,EAAYK,KAK3BL,EADoB,KAAlBR,EAAOW,EAAI,GACAA,EAEAA,EAAI,EAEnBE,EAAWF,EAAI,EACfA,MAGAE,GAAY,EACZF,IAEH,MAECE,IAIJ,IAAK,IAAKK,KAAYxB,EACpBa,EAAeA,EAAaL,MAAMS,GAAGQ,KAAKzB,EAASiB,IAGrD,OAAOJ,CACT"}