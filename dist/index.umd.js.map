{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["const Iconv = require(\"iconv\").Iconv;\n\nconst codepages = {\n  \"^L\": \"CP1252\",\n  \"^G\": \"CP1253\",\n  \"^C\": \"CP1251\",\n  \"^E\": \"CP1250\",\n  \"^T\": \"CP1254\",\n  \"^B\": \"CP1257\",\n  \"^J\": \"CP932\",\n  \"^H\": \"CP950\",\n  \"^S\": \"CP936\",\n  \"^K\": \"CP949\",\n  \"^8\": \"CP1252\",\n};\n\nconst specials = {\n  \"^v\": \"|\",\n  \"^a\": \"*\",\n  \"^c\": \":\",\n  \"^d\": \"\\\\\",\n  \"^s\": \"/\",\n  \"^q\": \"?\",\n  \"^t\": '\"',\n  \"^l\": \"<\",\n  \"^r\": \">\",\n  \"^h\": \"#\",\n  \"^^\": \"^\",\n};\n\nconst isMultiByte = (cp, c) => {\n  switch (cp) {\n    case \"^L\":\n    case \"^8\":\n    case \"^G\":\n    case \"^C\":\n    case \"^E\":\n    case \"^T\":\n    case \"^B\":\n      return false;\n    case \"^J\":\n      return (c > 0x80 && c < 0xa0) || (c >= 0xe0 && c < 0xfd);\n    case \"^H\":\n    case \"^S\":\n    case \"^K\":\n      return c > 0x80 && c < 0xff;\n    default:\n      throw new Error(`Unknown Codepage: ${c}`);\n  }\n};\n\nfunction parseLFSMessage(msg) {\n  let buffer = Buffer.from(msg);\n\n  // Default codepage: Latin 1\n  let currentCodepage = \"^L\";\n  let resultString = \"\";\n  let blockStart = 0;\n  let blockEnd = 0;\n  let iconvCurrent = new Iconv(codepages[currentCodepage], \"UTF-8\");\n\n  for (let i = 0; i <= buffer.length; i++) {\n    if (i === buffer.length || buffer[i] === 0) {\n      // End of string\n      if (blockStart < blockEnd) {\n        // Convert current block if it has data\n        resultString += iconvCurrent\n          .convert(buffer.slice(blockStart, blockEnd))\n          .toString();\n      }\n      i = buffer.length; // Break out of loop\n    } else if (isMultiByte(currentCodepage, buffer[i])) {\n      // Skip multi-byte char\n      blockEnd += 2;\n      i++;\n    } else if (buffer[i] === 0x5e) {\n      // Found '^'\n      let cpCheck = `^${iconvCurrent.convert(buffer.slice(i + 1, i + 2))}`;\n      if (codepages.hasOwnProperty(cpCheck)) {\n        // Changing codepage\n        currentCodepage = cpCheck;\n        iconvCurrent = new Iconv(codepages[currentCodepage], \"UTF-8\");\n        if (blockStart < blockEnd) {\n          // Convert current block if it has data\n          resultString += iconvCurrent\n            .convert(buffer.slice(blockStart, blockEnd))\n            .toString();\n        }\n        // Start a new block\n        if (buffer[i + 1] === 0x38) {\n          blockStart = i;\n        } else {\n          blockStart = i + 2;\n        }\n        blockEnd = i + 2;\n        i++;\n      } else {\n        // Skip escaped/colour change character\n        blockEnd += 2;\n        i++;\n      }\n    } else {\n      // single byte char\n      blockEnd++;\n    }\n  }\n\n  for (let i in specials) {\n    resultString = resultString.split(i).join(specials[i]);\n  }\n\n  return resultString;\n}\n\nmodule.exports = parseLFSMessage;\n"],"names":["const","Iconv","require","codepages","specials","isMultiByte","cp","c","Error","module","exports","msg","buffer","Buffer","from","currentCodepage","resultString","blockStart","blockEnd","iconvCurrent","i","length","convert","slice","toString","cpCheck","hasOwnProperty","let","split","join"],"mappings":"0IAAAA,IAAMC,EAAQC,QAAQ,SAASD,MAEzBE,EAAY,MACV,cACA,cACA,cACA,cACA,cACA,cACA,aACA,aACA,aACA,aACA,UAGFC,EAAW,MACT,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,KAGFC,WAAeC,EAAIC,UACfD,OACD,SACA,SACA,SACA,SACA,SACA,SACA,YACI,MACJ,YACKC,EAAI,KAAQA,EAAI,KAAUA,GAAK,KAAQA,EAAI,QAChD,SACA,SACA,YACIA,EAAI,KAAQA,EAAI,kBAEjB,IAAIC,2BAA2BD,KAmE3CE,OAAOC,QA/DP,SAAyBC,WACnBC,EAASC,OAAOC,KAAKH,GAGrBI,EAAkB,KAClBC,EAAe,GACfC,EAAa,EACbC,EAAW,EACXC,EAAe,IAAIlB,EAAME,EAAUY,GAAkB,SAEhDK,EAAI,EAAGA,GAAKR,EAAOS,OAAQD,OAC9BA,IAAMR,EAAOS,QAAwB,IAAdT,EAAOQ,GAE5BH,EAAaC,IAEfF,GAAgBG,EACbG,QAAQV,EAAOW,MAAMN,EAAYC,IACjCM,YAELJ,EAAIR,EAAOS,YACN,GAAIhB,EAAYU,EAAiBH,EAAOQ,IAE7CF,GAAY,EACZE,SACK,GAAkB,KAAdR,EAAOQ,GAAa,KAEzBK,EAAW,IAAGN,EAAaG,QAAQV,EAAOW,MAAMH,EAAI,EAAGA,EAAI,IAC3DjB,EAAUuB,eAAeD,IAG3BN,EAAe,IAAIlB,EAAME,EADzBY,EAAkBU,GACmC,SACjDR,EAAaC,IAEfF,GAAgBG,EACbG,QAAQV,EAAOW,MAAMN,EAAYC,IACjCM,YAIHP,EADoB,KAAlBL,EAAOQ,EAAI,GACAA,EAEAA,EAAI,EAEnBF,EAAWE,EAAI,EACfA,MAGAF,GAAY,EACZE,UAIFF,QAICS,IAAIP,KAAKhB,EACZY,EAAeA,EAAaY,MAAMR,GAAGS,KAAKzB,EAASgB,WAG9CJ"}